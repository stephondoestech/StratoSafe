services:
  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USERNAME:-stratosafe_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-stratosafe_password}
      POSTGRES_DB: ${DB_DATABASE:-stratosafe}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - stratosafe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-stratosafe_user} -d ${DB_DATABASE:-stratosafe}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    image: ${DOCKERHUB_USERNAME:-stephondoestech}/stratosafe-backend:${TAG:-latest}
    build:
      context: ./backend
      args:
        - DB_USERNAME=${DB_USERNAME:-stratosafe_user}
        - DB_PASSWORD=${DB_PASSWORD:-stratosafe_password}
        - JWT_SECRET=${JWT_SECRET:-supersecretkey123}
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - stratosafe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3001}/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  frontend:
    image: ${DOCKERHUB_USERNAME:-stephondoestech}/stratosafe-frontend:${TAG:-latest}
    build: ./frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - stratosafe-network
    restart: unless-stopped

networks:
  stratosafe-network:
    driver: bridge

volumes:
  pgdata:
  backend_uploads:
