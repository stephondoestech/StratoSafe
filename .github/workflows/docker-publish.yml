name: Docker Hub Build and Publish

on:
  push:
    branches: [main, master]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:  # Allow manual triggering

env:
  # Default environment variables
  DB_USERNAME: postgres
  DB_PASSWORD: ${{ secrets.DB_PASSWORD || 'postgres' }}
  DB_DATABASE: stratosafe
  JWT_SECRET: ${{ secrets.JWT_SECRET || 'github_default_jwt_secret' }}
  # Determine the Docker tag based on context
  DOCKER_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Debug step to verify secrets are available (masked in logs)
      - name: Debug - Check if secrets are available
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "DOCKERHUB_USERNAME is set"
          else
            echo "DOCKERHUB_USERNAME is NOT set"
          fi
          
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "DOCKERHUB_TOKEN is set"
          else
            echo "DOCKERHUB_TOKEN is NOT set"
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub with explicit parameters
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push backend image
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-backend:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            JWT_SECRET=${{ env.JWT_SECRET }}

      # Build and push frontend image
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-frontend:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Create nginx config for combined image
      - name: Create nginx config directory
        run: |
          mkdir -p nginx
          cat > nginx/combined.conf << EOF
          server {
              listen 3000;
              server_name localhost;
              
              location / {
                  root /app/frontend/build;
                  index index.html;
                  try_files \$uri \$uri/ /index.html;
              }
              
              location /api {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
          
      # Create Dockerfile for combined image
      - name: Create combined Dockerfile
        run: |
          cat > Dockerfile.combined << EOF
          FROM node:18-alpine AS base

          # Install dependencies required for both services
          RUN apk add --no-cache tini curl nginx

          # Create app directory
          WORKDIR /app

          # Copy package files for both services
          COPY backend/package.json backend/yarn.lock ./backend/
          COPY frontend/package.json frontend/yarn.lock ./frontend/
          COPY package.json yarn.lock ./

          # Install dependencies
          RUN yarn install

          # Copy source code
          COPY backend ./backend
          COPY frontend ./frontend

          # Build backend
          WORKDIR /app/backend
          ARG DB_USERNAME
          ARG DB_PASSWORD
          ARG JWT_SECRET
          ENV DB_USERNAME=\${DB_USERNAME}
          ENV DB_PASSWORD=\${DB_PASSWORD}
          ENV JWT_SECRET=\${JWT_SECRET}
          RUN yarn build

          # Build frontend
          WORKDIR /app/frontend
          RUN yarn build

          # Setup Nginx for frontend
          COPY ./nginx/combined.conf /etc/nginx/conf.d/default.conf

          # Expose ports
          EXPOSE 3000 3001

          # Create startup script
          WORKDIR /app
          RUN echo '#!/bin/sh\\nnginx\\ncd /app/backend && node dist/server.js &\\nwait' > /app/start.sh && \\
              chmod +x /app/start.sh

          # Run with tini for proper signal handling
          ENTRYPOINT ["/sbin/tini", "--"]
          CMD ["/app/start.sh"]
          EOF

      # Build and push combined image
      - name: Build and push combined image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.combined
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-combined:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-combined:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            JWT_SECRET=${{ env.JWT_SECRET }}

      # Create production docker-compose file
      - name: Create docker-compose.yml with versioned images
        if: github.event_name != 'pull_request'
        run: |
          cat > docker-compose.production.yml << EOF
          services:
            postgres:
              image: postgres:15
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: \${DB_PASSWORD:-postgres}
                POSTGRES_DB: \${DB_DATABASE:-stratosafe}
              volumes:
                - pgdata:/var/lib/postgresql/data
              networks:
                - stratosafe-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres -d \${DB_DATABASE:-stratosafe}"]
                interval: 5s
                timeout: 5s
                retries: 5

            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-backend:${{ env.DOCKER_TAG }}
              ports:
                - "\${PORT:-3001}:\${PORT:-3001}"
              environment:
                - PORT=\${PORT:-3001}
                - JWT_SECRET=\${JWT_SECRET}
                - DB_HOST=postgres
                - DB_PORT=5432
                - DB_USERNAME=postgres
                - DB_PASSWORD=\${DB_PASSWORD}
                - DB_DATABASE=\${DB_DATABASE}
              depends_on:
                postgres:
                  condition: service_healthy
              volumes:
                - backend_uploads:/app/uploads
              networks:
                - stratosafe-network
              restart: unless-stopped

            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-frontend:${{ env.DOCKER_TAG }}
              ports:
                - "\${FRONTEND_PORT:-3000}:3000"
              depends_on:
                - backend
              networks:
                - stratosafe-network
              restart: unless-stopped

          networks:
            stratosafe-network:
              driver: bridge

          volumes:
            pgdata:
            backend_uploads:
          EOF
          
          echo "Created docker-compose.production.yml with versioned images"
          
          # Also create a docker-compose file specifically for the combined image
          cat > docker-compose.combined.yml << EOF
          services:
            postgres:
              image: postgres:15
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: \${DB_PASSWORD:-postgres}
                POSTGRES_DB: \${DB_DATABASE:-stratosafe}
              volumes:
                - pgdata:/var/lib/postgresql/data
              networks:
                - stratosafe-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres -d \${DB_DATABASE:-stratosafe}"]
                interval: 5s
                timeout: 5s
                retries: 5

            combined:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-combined:${{ env.DOCKER_TAG }}
              ports:
                - "\${FRONTEND_PORT:-3000}:3000"
                - "\${PORT:-3001}:3001"
              environment:
                - PORT=3001
                - JWT_SECRET=\${JWT_SECRET}
                - DB_HOST=postgres
                - DB_PORT=5432
                - DB_USERNAME=postgres
                - DB_PASSWORD=\${DB_PASSWORD}
                - DB_DATABASE=\${DB_DATABASE}
              depends_on:
                postgres:
                  condition: service_healthy
              volumes:
                - backend_uploads:/app/uploads
              networks:
                - stratosafe-network
              restart: unless-stopped

          networks:
            stratosafe-network:
              driver: bridge

          volumes:
            pgdata:
            backend_uploads:
          EOF
          
          echo "Created docker-compose.combined.yml for the combined image"

      - name: Upload docker-compose files as artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-files
          path: |
            docker-compose.production.yml
            docker-compose.combined.yml
          retention-days: 7
