name: Docker Hub Build and Publish

on:
  push:
    branches: [main, master]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Debug step - display username (without revealing it)
      - name: Debug username format
        run: |
          echo "Username length: ${#DOCKER_USERNAME}"
          echo "Username first character: ${DOCKER_USERNAME:0:1}"
          echo "Username last character: ${DOCKER_USERNAME: -1}"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Store credentials in a file for docker login
      - name: Store Docker credentials in config.json
        run: |
          mkdir -p $HOME/.docker
          echo '{"auths":{"https://index.docker.io/v1/":{"auth":"'$(echo -n ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }} | base64)'"}}}'> $HOME/.docker/config.json
          cat $HOME/.docker/config.json | grep -v auth  # Show file structure without revealing auth
          
      # Try to run a simple Docker command to test auth
      - name: Test Docker auth
        run: docker info

      # Build and push backend image
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DB_USERNAME=postgres
            DB_PASSWORD=${{ secrets.DB_PASSWORD || 'postgres' }}
            JWT_SECRET=${{ secrets.JWT_SECRET || 'github_default_jwt_secret' }}

      # Build and push frontend image
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Create production docker-compose file
      - name: Create docker-compose.yml with versioned images
        if: github.event_name != 'pull_request'
        run: |
          cat > docker-compose.production.yml << EOF
          services:
            postgres:
              image: postgres:15
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: \${DB_PASSWORD:-postgres}
                POSTGRES_DB: \${DB_DATABASE:-stratosafe}
              volumes:
                - pgdata:/var/lib/postgresql/data
              networks:
                - stratosafe-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres -d \${DB_DATABASE:-stratosafe}"]
                interval: 5s
                timeout: 5s
                retries: 5

            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-backend:latest
              ports:
                - "\${PORT:-3001}:\${PORT:-3001}"
              environment:
                - PORT=\${PORT:-3001}
                - JWT_SECRET=\${JWT_SECRET}
                - DB_HOST=postgres
                - DB_PORT=5432
                - DB_USERNAME=postgres
                - DB_PASSWORD=\${DB_PASSWORD}
                - DB_DATABASE=\${DB_DATABASE}
              depends_on:
                postgres:
                  condition: service_healthy
              volumes:
                - backend_uploads:/app/uploads
              networks:
                - stratosafe-network
              restart: unless-stopped

            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/stratosafe-frontend:latest
              ports:
                - "\${FRONTEND_PORT:-3000}:3000"
              depends_on:
                - backend
              networks:
                - stratosafe-network
              restart: unless-stopped

          networks:
            stratosafe-network:
              driver: bridge

          volumes:
            pgdata:
            backend_uploads:
          EOF
          
          echo "Created docker-compose.production.yml with versioned images"

      - name: Upload docker-compose.production.yml as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-production
          path: docker-compose.production.yml
          retention-days: 7
